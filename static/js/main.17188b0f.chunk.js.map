{"version":3,"sources":["components/card/index.js","components/cardList/index.js","components/searchBox/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","employeeProp","id","name","email","CardList","employeesProp","map","employee","key","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","employees","fetch","then","response","json","data","this","employeeFilter","filter","toLowerCase","includes","placeHolder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAiBeA,G,kBAbF,SAAAC,GACX,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,0BACJC,IAAG,+BAA0BH,EAAMI,aAAaC,GAA7C,eAEL,4BAAKL,EAAMI,aAAaE,MACxB,2BAAIN,EAAMI,aAAaG,UCIdC,EAXE,SAAAR,GAEf,OACE,yBAAKC,UAAU,aACZD,EAAMS,cAAcC,KAAI,SAAAC,GACvB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAASN,GAAID,aAAcO,SCGtCE,G,MAVG,SAACb,GACf,OACI,2BACEc,KAAK,SACLC,YAAaf,EAAMe,YACnBC,SAAUhB,EAAMiB,iBCyCXC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAOFD,aAAe,SAAAE,GACb,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SARxB,EAAKC,MAAQ,CACXC,UAAW,GACXJ,YAAa,IAJH,E,gEAcO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,OAAO,EAAKV,SAAS,CAAEK,UAAWK,S,+BAI9B,IAAD,EAC4BC,KAAKP,MAAhCC,EADD,EACCA,UAAWJ,EADZ,EACYA,YACbW,EAAiBP,EAAUQ,QAAO,SAAAtB,GAAQ,OAC9CA,EAASL,KAAK4B,cAAcC,SAASd,EAAYa,kBAEnD,OACE,yBAAKjC,UAAU,OACb,oDACA,kBAAC,EAAD,CACEgB,aAAcc,KAAKd,aACnBmB,YAAY,qBAGd,kBAAC,EAAD,CAAU3B,cAAeuB,S,GAtCfK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17188b0f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './styles.css'\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"props.employeeProp.name\"\r\n        src={`https://robohash.org/${props.employeeProp.id}?set=set5`}\r\n      />\r\n      <h2>{props.employeeProp.name}</h2>\r\n      <p>{props.employeeProp.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./cardList.css\";\r\n\r\nimport Card from \"../card\";\r\n\r\nconst CardList = props => {\r\n  //console.log(props);\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.employeesProp.map(employee => {\r\n        return <Card key={employee.id} employeeProp={employee} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nconst SearchBox = (props) => {\r\n    return(\r\n        <input\r\n          type=\"search\"\r\n          placeholder={props.placeholder}\r\n          onChange={props.handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/cardList\";\nimport SearchBox from \"./components/searchBox\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      employees: [],\n      searchField: \"\"\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      searchField: e.target.value\n    });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        return this.setState({ employees: data });\n      });\n  }\n\n  render() {\n    const { employees, searchField } = this.state;\n    const employeeFilter = employees.filter(employee =>\n      employee.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Sample React project</h1>\n        <SearchBox\n          handleChange={this.handleChange}\n          placeHolder=\"Search Employees\"\n        />\n\n        <CardList employeesProp={employeeFilter} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}